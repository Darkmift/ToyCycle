openapi: 3.0.0
info:
  title: ToyCycle API
  version: 1.0.0
paths:
  /api/v1/toys:
    get:
      summary: Get list of toys
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: sort
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order (asc or desc)
      responses:
        '200':
          description: A list of toys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Toy'
    post:
      summary: Add a new toy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Toy'
      responses:
        '201':
          description: Toy created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
  /api/v1/toys/{id}:
    get:
      summary: Get a toy by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Toy found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
        '404':
          description: Toy not found
        '500':
          description: Internal server error
    put:
      summary: Update a toy by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialToy'
      responses:
        '200':
          description: Toy updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
        '400':
          description: Invalid input
        '404':
          description: Toy not found
    delete:
      summary: Delete a toy by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Toy deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
        '404':
          description: Toy not found
        '500':
          description: Internal server error
  /api/v1/users:
    get:
      summary: Get list of users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: A new user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/v1/me:
    get:
      summary: Get a user's profile
      responses:
        '200':
          description: a user's profile
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user's profile
      responses:
        '204':
          description: a user's profile deleted
        '404':
          description: user id not found
        '401':
          description: Unauthorized
components:
  schemas:
    Toy:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [available, exchanged]
        images:
          type: array
          items:
            type: string
        tokenValue:
          type: integer
      required:
        - name
        - description
        - tokenValue
    PartialToy:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [available, exchanged]
        images:
          type: array
          items:
            type: string
        tokenValue:
          type: integer
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        name:
          type: string
        lastActive:
          type: string
        password:
          type: string
        toyListings:
          type: array
          items:
            $ref: '#/components/schemas/Toy'
        tokenBalance:
          type: integer
      required:
        - username
        - name
        - password
