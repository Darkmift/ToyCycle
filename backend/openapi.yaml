openapi: 3.1.0
info:
  title: ToyCycle API
  version: 1.0.0
paths:
  /api/v1/toys:
    get:
      summary: Get list of toys
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: sort
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order (asc or desc)
      responses:
        '200':
          description: A list of toys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Toy'
    post:
      summary: Add a new toy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Toy'
      responses:
        '201':
          description: Toy created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
  /api/v1/toys/{id}:
    get:
      summary: Get a toy by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Toy found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
        '404':
          description: Toy not found
        '500':
          description: Internal server error
    put:
      summary: Update a toy by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialToy'
      responses:
        '200':
          description: Toy updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
        '400':
          description: Invalid input
        '404':
          description: Toy not found
    delete:
      summary: Delete a toy by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Toy deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
        '404':
          description: Toy not found
        '500':
          description: Internal server error
  /api/v1/users:
    get:
      summary: Get list of users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
        responses:
          '200':
            description: Toy updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Toy'
          '400':
            description: Invalid input
          '404':
            description: Toy not found
      delete:
        summary: Delete a toy by ID
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Toy deleted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Toy'
          '404':
            description: Toy not found
          '500':
            description: Internal server error
    /api/v1/users:
      get:
        summary: Get list of users
        operationId: getAllUsers
        tags:
          - Users
        responses:
          '200':
            description: An array of user objects
            content:
              application/json:
                 schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/UserResponse'
                    status:
                      type: string
          '404':
            description: Toys not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      post:
        summary: Create a new user
        tags:
          - Users
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        responses:
          '201':
            description: A new user created
            content:
              application/json:
                 schema:
                  type: object
                  properties:
                    data:
                      type: object
                      items:
                        $ref: '#/components/schemas/UserResponse'
                    status:
                      type: string
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    /api/v1/users/{user_id}:
      get:
        summary: Get user by id
        operationId: getUserById
        parameters:
          - name: user_id
            in: path
            required: true
            description: Id of user
            schema:
              type: string
        tags:
          - Users
        responses:
          '200':
            description: An user of user objects
            content:
              application/json:
                 schema:
                  type: object
                  properties:
                    data:
                      type: object
                      items:
                        $ref: '#/components/schemas/UserResponse'
                    status:
                      type: string
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      put:
        summary: Update a user's profile
        operationId: updateCurrentUser
        tags:
          - Users
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        responses:
          '200':
            description: A current user updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserResponse'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      delete:
        summary: Delete user by id
        operationId: deleteuserById
        parameters:
          - name: user_id
            in: path
            required: true
            description: Id of toy
            schema:
              type: string
        tags:
          - Users
        responses:
          '204':
            description:  Delete user object by id
            content:
              application/json:
                schema:
                  type: object
                  properties:
                   status:
                      type: string
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    /me:
      get:
        summary: Get a current user's profile
        operationId: getCurrentUser
        tags:
          - Me
        responses:
          '201':
            description: Get current user
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      put:
        summary: Update a current user's profile
        operationId: updateCurrentUser
        tags:
          - Me
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        responses:
          '201':
            description: A current user updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      delete:
        summary: Delete a current user's profile
        operationId: deleteCurrentUser
        tags:
          - Me
        responses:
          '204':
            description: a user's profile deleted
          '404':
            description: user id not found
          '401':
            description: Unauthorized
components:
  schemas:
    Toy:
      type: object
      required:
        - name
        - description
        - tokenValue
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [available, exchanged]
        images:
          type: array
          items:
            type: string
        tokenValue:
          type: integer
    PartialToy:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [available, exchanged]
        images:
          type: array
          items:
            type: string
        tokenValue:
          type: integer
    User:
      type: object
      properties:
        id:
          type: string
        firstName:
         type: string
        lastName:
         type: string
        lastActive:
          type: string
          format: date-time
        email:
          type: string
        password:
          type: string
        avatar:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        bio:
          type: string
        toyListings:
          type: array
          items:
            $ref: '#/components/schemas/Toy'
        tokenBalance:
          type: integer
      required:
        - firstName
        - lastName
        - email
        - password
        - address
    Address:
      type: object
      required:
        - city
        - country
        - zipcode
        - street1
      properties:
        city:
          type: string
        country:
          type: string
        zipcode:
          type: string
        street1:
          type: string
        street2:
          type: string
    UserResponse:
      type: object
      properties:
        id:
          type: string
        firstName:
         type: string
        lastName:
         type: string
        lastActive:
          type: string
          format: date-time
        email:
          type: string
        avatar:
          type: string
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        bio:
          type: string
        toyListings:
          $ref: '#/components/schemas/Toys'
        tokenBalance:
          type: integer
    Users:
      type: array
      items:
         $ref: '#/components/schemas/UserResponse'
    Error:
      type: object
      required:
          - status
          - message
      properties:
        status:
          type: integer
        message:
          type: string
